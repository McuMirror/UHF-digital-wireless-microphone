// Recieve I2S audio from codec over arduino due SSC
// Encode each 16bit sample into an IMA_ADPCM 4 bit smaple
// build 1 byte out of 2 x EMA_ADPCM samples and add it to the circular buffer.
// when there are 48 bytes in buffer TX the 48 bytes with RH_RF24

// include 2wire ( i2c )
#include <Wire.h>

// include necessary libraries
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// include libraries for UHF tx
#include <SPI.h>
#include <RH_RF24.h>  // radiohead low level driver lib for RF24 ( SI4463 module )

// include IMA ADPCM encoder decoder lib
#include <IMA_ADPCM.h>

// instance of the radio driver now called rf24
RH_RF24 rf24(10,2); // pin 10 cs , pin 2 irq

// obstantiate IMA_ADPCM codec
IMA_ADPCM encoderADPCM;  // make IMA_ADPCM instance for encoder


// define & include stuff that libltc needs here
#include "ltc.h"
#include "encoder.h"
#include "decoder.h"

// other variables for packet handling

uint16_t samples[48]; // resized 32 bit word to 16bit buffer
int16_t tempsamples[48]; // tempory space to get samples out of circular bufffer into encoder.. encoder wants a buffer.. 
uint8_t tempadpcm[24]; // pull out 48 bytes of adpcm samples from circular buffer 2

short unsigned int packet[2];  // 2 byte array to store 2 returned 4 bit ADPCM samples
uint8_t radiopacket = 0;
uint8_t adpcm[24];
uint8_t buffcount = 0; // for packet
uint8_t packetcount = 0; // samples loaded into circular buffer
uint8_t flag = 0;

// define structures of circular buffer for samples IO

#define MAX_ITEMS 1920  // maximum curcular buffer size
typedef struct circularQueue_s
{
    int    first;
    int     last;
    int    validItems;
    uint16_t  data[MAX_ITEMS];  // i chaged the buffer from int to uint8_t 
} circularQueue_t;

// prototypes of the functions // i don't understnad this part , need to learn !

void initializeQueue(circularQueue_t *theQueue);

int isEmpty(circularQueue_t *theQueue);

int putItem(circularQueue_t *theQueue, int theItemValue);

int getItem(circularQueue_t *theQueue, int *theItemValue);

void printQueue(circularQueue_t *theQueue);

// end prototyping of functions for circular buffer,.,. don'r understand what thet are yet..

// circular buffer , difine a buffer , I think you can have more than one ?
circularQueue_t myQueue;

circularQueue_t adpcmQueue; // lets try and define another circular buffer and see if it works ! 


int samplesperframe = 1920;  // 48000khz / 25fps , samples per frame
LTCDecoder *decoder;  // should this be a pointer ? 

// WM8731 setup

#define LINVOL 20
#define RINVOL 20
#define LHPVOL 127
#define RHPVOL 127
#define ADCHPD 0
#define SIDEATT 0
#define SIDETONE 0
#define DACSEL 1
#define BYPASS 0
#define INSEL 1
#define MUTEMIC 0
#define MICBOOST 1
#define SAMPLE_RATE 48
#define BIT_RATE 32  // 16 24 or 32 bit modes  (  SSC I2S lib wants 32bit per channel, less bitrate is left justified in 32bit )


// I2S IO library 

#include <HiFi.h>

void codecTxReadyInterrupt(HiFiChannelID_t);
void codecRxReadyInterrupt(HiFiChannelID_t);

uint32_t ldat = 0;
uint32_t rdat = 0;


void setup() {

/// initialise the circular buffer myQu
initializeQueue(&myQueue); // initialise buffer
initializeQueue(&adpcmQueue); // lets try anotherm not using yet but will try it


  initialcodec();  // initialize audio codec hardware

// create ltc decoder called decoder with n samples per frame
  decoder = ltc_decoder_create(samplesperframe, 0);  

  Serial.begin(115200);

 // Initialize the Arduino SSC codec

  // set SSC DUE I2S codec into reset
  pinMode(7, OUTPUT);
  digitalWrite(7, LOW);

  HiFi.begin();

  // Configure transmitter for 2 channels, external TK/TF clocks, 32 bit per
  // channel (data less than 32-bit is left justified in the 32 bit word, but
  // codec config needs 32 clocks per channel).
  HiFi.configureTx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_EXT_CLKS, 32);

  // Same config as above, except sync the receiver to transmitter (RK/RF
  // clock signals not needed)
  HiFi.configureRx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_TK_RK_CLK, 32);

  // Since we've decided to sync the receiver to the transmitter, we could
  // handle both reading and writing in a single interrupt (receive or
  // transmit).  This example uses both just for demonstration purposes.
  HiFi.onTxReady(codecTxReadyInterrupt);
  HiFi.onRxReady(codecRxReadyInterrupt);

  // release codec from reset
  digitalWrite(7, HIGH);

  // Enable both receiver and transmitter.
  HiFi.enableRx(true);
  HiFi.enableTx(true);

// Finally initialze UHF RF24 TX module

rf24.init();  // initialize rf module
 
//  rf24.setModemConfig(RH_RF24::GFSK_Rb150Fd300);  // GFSK_Rb5Fd10 // GFSK_Rb150Fd300
//  rf24.setFrequency(434.00);  //
// rf24.setTxPower(0x05);
 rf24.printRegisters(); // dump config info to serial port
}



/// circular buffer functions start here


// initialiseQueue function for circular buffer , set everything to zero
void initializeQueue(circularQueue_t *theQueue)
{
    int i;
    theQueue->validItems  =  0;
    theQueue->first       =  0;
    theQueue->last        =  0;
    for(i=0; i<MAX_ITEMS; i++)
    {
        theQueue->data[i] = 0;
    }        
    return;
}


// isEmpty function verifies if the queue is empty
int isEmpty(circularQueue_t *theQueue)
{
    if(theQueue->validItems==0)
        return(1);
    else
        return(0);
}


// putItem function, verifies if there is space in the queue, and, in this case, add an item
// at the end of the queue (theQueue->last element). Then it updates the value of theQueue->last 
// the modulus operator is needed to stay into the boundaries of the array.

int putItem(circularQueue_t *theQueue, uint16_t theItemValue)
{
    if(theQueue->validItems>=MAX_ITEMS)
    {
        printf("The queue is full\n");
        printf("You cannot add items\n");
        return(-1);
    }
    else
    {
        theQueue->validItems++;
        theQueue->data[theQueue->last] = theItemValue;
        theQueue->last = (theQueue->last+1)%MAX_ITEMS;
    }
}

// getItem function returns -1 if the queue is empty, otherwise it takes the first element into the queue, 
// then it updates the number of items and the first element of the queue (look at modulus operator).

int getItem(circularQueue_t *theQueue, uint16_t *theItemValue)
{
    if(isEmpty(theQueue))
    {
        printf("isempty\n");
        return(-1);
    }
    else
    {
        *theItemValue=theQueue->data[theQueue->first];
        theQueue->first=(theQueue->first+1)%MAX_ITEMS;
        theQueue->validItems--;
        return(0);
    }
}


// printQueue function, simply, prints validItems elements of theQueue starting from the theQueue->first element.
// maybe I can modify this for the rf24.send(&data, len); and do away with the printQueue function
// and call it void fireoffdata(circularQueue_t *theQueue)   ???

void printQueue(circularQueue_t *theQueue)
{
    int aux, aux1;
    aux  = theQueue->first;
    aux1 = theQueue->validItems;
    while(aux1>0)
    {
        printf("Element #%d = %d\n", aux, theQueue->data[aux]);
        aux=(aux+1)%MAX_ITEMS;
        aux1--;
    }
    return;
}
/// end circular buffer functions

void loop()  {
  
 uint16_t readValue; // read from circular buffer 
 uint8_t len = 1;

// LOAD 16 bit samples into circular buffer

 if (flag = 1 && ldat > 0 )  // sample ready ?
 {
 samples[buffcount] = ((ldat >> 16) & 0xffff);  // ruduce 32it sample to unsigned 16 bit
 putItem(&myQueue, samples[buffcount]);   // load samples into circular buffer
 buffcount++;
 flag = 0; // processed smaple , falg = 0 where done , wait for another sample from I2S inturrupt.
 }
 
 if ( buffcount >= 48 )  // if there are 48 samples ?
 {
 buffcount = 0;  // reset buffercount 
 packetcount = 1; // samples ready to be processed
 }
 
// When Circular buffer has 48 samples, encode them and send them in 24 byte packet with 48 IAM_ADPCM samples. 
if ( packetcount = 1 )
{
  encoderADPCM.EncodeInit(tempsamples[1],tempsamples[2]); // do we need this for adpcm prediction or something 

for(int i=0; i<48; i++) // load samples from buffer into tempsamples
{
 getItem(&myQueue, &readValue);  // get next available 16 bit sample from buffer
 tempsamples[i] = readValue;     // load samples into tempsamples int16_t array ( encoderADPCM.Encode needs signed int ) 
tempadpcm[i] = encoderADPCM.Encode (tempsamples[i]);   // encode samples to IMA_ADPCM
packetcount = 2;
}
}
 
if ( packetcount = 2 )
{
// extract least significant 4 bits from alternate samples from adpcm[i] and pack 2 adpcm smaples into 1 byte in adpcm array
for(int i=0; i<48; i = i + 2) 
{
adpcm[i] = ((tempadpcm[i]) | (tempadpcm[i+1] << 4));   // use the | 'or' and bitshift  ? 
Serial.println(adpcm[i]);  // should be 8 bits here.. change this to print binary .. 
}
packetcount = 3;
}

// send 24 bytes adpcm array
if ( packetcount = 3 )
{
rf24.send(adpcm, sizeof (adpcm)); // sending 24 byte packet of 48 adpcm 4bit samples
rf24.waitPacketSent();  // need this or not ?
packetcount = 0;
}


}  // end void loop


/// ignore ltc code for now

 // LTC timecode
 
 //  ltc_decoder_write_u16 (decoder, &samples[buffcount],1, 1);  // write 1 16 bit sample to LibLTC decoder 
 //   buffcount = 0; // reset buff counter  
 //   LTCFrameExt frame;
 //   if (ltc_decoder_read (decoder, &frame) > 0) {
 //             SMPTETimecode stime;
 //             ltc_frame_to_time(&stime, &frame.ltc, 1);
 //             Serial.print(stime.hours);
 //             Serial.print(stime.mins);
 //             Serial.print(stime.secs);
 //             Serial.print(stime.frame);
 //    }  
 //    }

void codecTxReadyInterrupt(HiFiChannelID_t channel)
{
  if (channel == HIFI_CHANNEL_ID_1)
  {
    // Left channel
   //  HiFi.write(ldat);
     
  }
  else
  {
    // Right channel
   HiFi.write(rdat);
  }
}

void codecRxReadyInterrupt(HiFiChannelID_t channel)
{
  if (channel == HIFI_CHANNEL_ID_1)
  {
    // Left channel
    ldat = HiFi.read(); 
    flag = 1;
  
  }
  else
  {
    // Right channel
 //   rdat = HiFi.read();  
   }  
}


void initialcodec() {
  
 // Initialize the WM8731
  Serial.println( "Initializing" );
  delay(10);

   Wire.begin();
  Wire.beginTransmission(0x1e);
  Wire.write(0x1e); // reset reg
  Wire.write(B00000000); // do reset
  Wire.endTransmission();

// delay(50);

   Wire.begin();
  Wire.beginTransmission(0x1a);
  Wire.write(0x0c); // power reduction register
  Wire.write(0x00); // turn everything on
  Wire.endTransmission();

  delay(10);

   Wire.beginTransmission(0x1a);
  Wire.write(0x0e); // digital data format REG 00001110   0x0e
#if BIT_RATE == 32
  Wire.write(0x72);  // 32bit,MASTER MODE  01110010  left justified
#elif BIT_RATE == 24
  Wire.write(0x62);   // 24bit,MASTER MODE  01100010  left justified
#elif BIT_RATE == 16
  Wire.write(0x42);   // 16bit,MASTER MODE  01000010  left justified
#endif
  Wire.endTransmission();

  delay(10);

    Wire.beginTransmission(0x1a);
  Wire.write(0x10); // clock configuration
#if SAMPLE_RATE == 88
  Wire.write(0xbc);
#elif SAMPLE_RATE == 48
  Wire.write(0x00);
#elif SAMPLE_RATE == 44
  Wire.write(0xa0);
#elif SAMPLE_RATE == 22
  Wire.write(0xe0);
#elif SAMPLE_RATE == 8
  Wire.write(0xac);
#elif SAMPLE_RATE == 2
  Wire.write(0xce);
#endif
  Wire.endTransmission();
  
  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x12); // digital interface active
  Wire.write(0x01);
  Wire.endTransmission();

  delay(10);

    Wire.beginTransmission(0x1a);
  Wire.write(0x0a); // digital audio path configuration
  Wire.write((uint8_t)ADCHPD);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x00); // left in setup register
  Wire.write((uint8_t)LINVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x02); // right in setup register
  Wire.write((uint8_t)RINVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x04); // left headphone out register
  Wire.write((uint8_t)LHPVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x06); // right headphone out register
  Wire.write((uint8_t)RHPVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x08); // analog audio pathway configuration
  Wire.write((uint8_t)((SIDEATT << 6) | (SIDETONE << 5) | (DACSEL << 4) | (BYPASS << 3) | (INSEL << 2) | (MUTEMIC << 1) | (MICBOOST << 0)));
  Wire.endTransmission();

  delay(50);

  Serial.println( "done" );
} 
// end initialisecodec
